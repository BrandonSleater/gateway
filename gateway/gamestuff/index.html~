<!DOCTYPE html>
<script src='vendor/three.js/build/three.js'></script>
<script src="vendor/require.js/require.js"></script>
<script src="vendor/three.js/examples/js/Detector.js"></script>
<script src="vendor/threex.windowresize.js"></script>
<body style='margin: 0px; background-color: #bbbbbb; overflow: hidden;'><script>
require([ ], function(){
	// detect WebGL
	if( !Detector.webgl ){
		Detector.addGetWebGLMessage();
		throw 'WebGL Not Available'
	} 
	// setup webgl renderer full page
	var renderer	= new THREE.WebGLRenderer();
	renderer.setSize( window.innerWidth, window.innerHeight );
	document.body.appendChild( renderer.domElement );
	// setup a scene and camera
	var scene	= new THREE.Scene();
	var camera	= new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 1000);
	camera.position.z = 10;

	// declare the rendering loop
	var onRenderFcts= [];

	// handle window resize events
	var winResize	= new THREEx.WindowResize(renderer, camera)

	//nyan cat

	var nyanCat = new THREEx.NyanCat()
	nyanCat.container.scale.multiplyScalar(1/30)
	//scene.add(nyanCat.container)

	//////////////////////////////////////////////////////////////////////////////////
	//		default 3 points lightning					//
	//////////////////////////////////////////////////////////////////////////////////
	
	var ambientLight= new THREE.AmbientLight( 0x020202 )
	scene.add( ambientLight)
	var frontLight	= new THREE.DirectionalLight('white', 1)
	frontLight.position.set(0.5, 0.5, 2)
	scene.add( frontLight )
	var backLight	= new THREE.DirectionalLight('white', 0.75)
	backLight.position.set(-0.5, -0.5, -2)
	scene.add( backLight )		

	//////////////////////////////////////////////////////////////////////////////////
	//		add an object and make it move					//
	//////////////////////////////////////////////////////////////////////////////////	
	
	var headMaterial = new THREE.MeshPhongMaterial();
	var faceMaterial = new THREE.MeshPhongMaterial( { color: 0x000000 } );

	var head = new THREE.Mesh(
		new THREE.CylinderGeometry( .5, .1, 1, 50), headMaterial);
	scene.add( head );

	var nose = new THREE.Mesh(
		new THREE.CylinderGeometry( .05, .05, .05, 6), faceMaterial);
	nose.rotation.x = 90;
	nose.position.z = .4;
	nose.position.y = .125
	scene.add( nose );

	var leftEye = new THREE.Mesh(
		new THREE.CylinderGeometry( .07, .07, .05, 6), faceMaterial);
	leftEye.rotation.x = 90;
	leftEye.position.z = .4;
	leftEye.position.y = .3;
	leftEye.position.x = .125;
	scene.add( leftEye );

	var rightEye = new THREE.Mesh(
		new THREE.CylinderGeometry( .07, .07, .05, 6), faceMaterial);
	rightEye.rotation.x = 90;
	rightEye.position.z = .4;
	rightEye.position.y = .3;
	rightEye.position.x = -.125;
	scene.add( rightEye );

	var body = new THREE.Mesh(
		new THREE.CylinderGeometry( .5, .2, 2, 50), headMaterial);
	body.scale.x = 2;
	body.scale.z = 1.2;
	body.position.y = -1.2;
	scene.add(body);

	var firstBall = new THREE.Mesh(
		new THREE.SphereGeometry(.15), headMaterial);
	firstBall.scale.x = 2;
	firstBall.scale.y = 1.5;
	firstBall.position.y = -2.2;
	scene.add(firstBall);
	
	//onRenderFcts.push(function(delta, now){
	//	mesh.rotateX(0.5 * delta);
	//	mesh.rotateY(2.0 * delta);		
	//})
	
	//////////////////////////////////////////////////////////////////////////////////
	//		Camera Controls							//
	//////////////////////////////////////////////////////////////////////////////////
	var mouse	= {x : 0, y : 0}
	document.addEventListener('mousemove', function(event){
		mouse.x	= (event.clientX / window.innerWidth ) - 0.5
		mouse.y	= (event.clientY / window.innerHeight) - 0.5
	}, false)
	onRenderFcts.push(function(delta, now){
		camera.position.x += (mouse.x*5 - camera.position.x) * (delta*3)
		camera.position.y += (mouse.y*5 - camera.position.y) * (delta*3)
		camera.lookAt( scene.position )
	})

	//////////////////////////////////////////////////////////////////////////////////
	//		render the scene						//
	//////////////////////////////////////////////////////////////////////////////////
	onRenderFcts.push(function(){
		renderer.render( scene, camera );		
	})
	
	//////////////////////////////////////////////////////////////////////////////////
	//		Rendering Loop runner						//
	//////////////////////////////////////////////////////////////////////////////////
	var lastTimeMsec= null
	requestAnimationFrame(function animate(nowMsec){
		// keep looping
		requestAnimationFrame( animate );
		// measure time
		lastTimeMsec	= lastTimeMsec || nowMsec-1000/60
		var deltaMsec	= Math.min(200, nowMsec - lastTimeMsec)
		lastTimeMsec	= nowMsec
		// call each update function
		onRenderFcts.forEach(function(onRenderFct){
			onRenderFct(deltaMsec/1000, nowMsec/1000)
		})
	})
})
</script></body>
